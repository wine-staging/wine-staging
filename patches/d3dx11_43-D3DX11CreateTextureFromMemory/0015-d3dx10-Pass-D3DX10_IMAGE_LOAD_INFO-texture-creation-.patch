From ee999e236f7de9c21cc6cdd9d1e2ecfe85ee43e7 Mon Sep 17 00:00:00 2001
From: Connor McAdams <cmcadams@codeweavers.com>
Date: Fri, 19 Sep 2025 11:45:26 -0400
Subject: [PATCH] d3dx10: Pass D3DX10_IMAGE_LOAD_INFO texture creation
 arguments through in load_texture_data().

Signed-off-by: Connor McAdams <cmcadams@codeweavers.com>
---
 dlls/d3dx10_43/tests/d3dx10.c | 12 ++++++------
 dlls/d3dx10_43/texture.c      | 18 +++++-------------
 2 files changed, 11 insertions(+), 19 deletions(-)

diff --git a/dlls/d3dx10_43/tests/d3dx10.c b/dlls/d3dx10_43/tests/d3dx10.c
index 2f26f8e14f1..c6cd1fa88cd 100644
--- a/dlls/d3dx10_43/tests/d3dx10.c
+++ b/dlls/d3dx10_43/tests/d3dx10.c
@@ -1034,7 +1034,7 @@ test_image_load_info[] =
                        (D3D10_BIND_SHADER_RESOURCE | D3D10_BIND_RENDER_TARGET), 0,
                        (D3D10_RESOURCE_MISC_GENERATE_MIPS | D3D10_RESOURCE_MISC_TEXTURECUBE) } },
         { 4, 4, 1, 6, 3, DDS_RESOURCE_MISC_TEXTURECUBE, DXGI_FORMAT_BC1_UNORM, D3D10_RESOURCE_DIMENSION_TEXTURE2D,
-          D3DX10_IFF_DDS }, .todo_resource_desc = TRUE,
+          D3DX10_IFF_DDS }
     },
     /*
      * Even with the autogen mips misc flag specified, the mip levels argument
@@ -1050,7 +1050,7 @@ test_image_load_info[] =
                        (D3D10_BIND_SHADER_RESOURCE | D3D10_BIND_RENDER_TARGET), 0,
                        (D3D10_RESOURCE_MISC_GENERATE_MIPS | D3D10_RESOURCE_MISC_TEXTURECUBE) } },
         { 4, 4, 1, 6, 3, DDS_RESOURCE_MISC_TEXTURECUBE, DXGI_FORMAT_BC1_UNORM, D3D10_RESOURCE_DIMENSION_TEXTURE2D,
-          D3DX10_IFF_DDS }, .todo_resource_desc = TRUE,
+          D3DX10_IFF_DDS }
     },
 };
 
@@ -1116,7 +1116,7 @@ static const struct test_invalid_image_load_info
             D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3D10_CPU_ACCESS_READ, D3D10_USAGE_DYNAMIC,
             D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT
         },
-        E_INVALIDARG, S_OK, E_INVALIDARG, .todo_hr = TRUE, .todo_create_device_object_hr = TRUE,
+        E_INVALIDARG, S_OK, E_INVALIDARG
     },
     {
         test_dds_32bpp, sizeof(test_dds_32bpp),
@@ -1124,7 +1124,7 @@ static const struct test_invalid_image_load_info
             D3DX10_DEFAULT,           D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3D10_USAGE_DEFAULT,
             D3D10_BIND_DEPTH_STENCIL, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT
         },
-        E_INVALIDARG, S_OK, E_INVALIDARG, .todo_hr = TRUE, .todo_create_device_object_hr = TRUE,
+        E_INVALIDARG, S_OK, E_INVALIDARG
     },
     /*
      * D3D10_RESOURCE_MISC_GENERATE_MIPS requires binding as a shader resource
@@ -1136,7 +1136,7 @@ static const struct test_invalid_image_load_info
             D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT,    D3DX10_DEFAULT, D3D10_USAGE_DEFAULT,
             D3DX10_DEFAULT, D3DX10_DEFAULT, D3D10_RESOURCE_MISC_GENERATE_MIPS, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT
         },
-        E_INVALIDARG, S_OK, E_INVALIDARG, .todo_hr = TRUE, .todo_create_device_object_hr = TRUE,
+        E_INVALIDARG, S_OK, E_INVALIDARG
     },
     /* Can't set the cube texture flag if the image isn't a cube texture. */
     {
@@ -1145,7 +1145,7 @@ static const struct test_invalid_image_load_info
             D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT,    D3DX10_DEFAULT, D3D10_USAGE_DEFAULT,
             D3DX10_DEFAULT, D3DX10_DEFAULT, D3D10_RESOURCE_MISC_TEXTURECUBE,   D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT
         },
-        E_INVALIDARG, S_OK, E_INVALIDARG, .todo_hr = TRUE, .todo_create_device_object_hr = TRUE,
+        E_INVALIDARG, S_OK, E_INVALIDARG
     },
 };
 
diff --git a/dlls/d3dx10_43/texture.c b/dlls/d3dx10_43/texture.c
index cd5fc112110..80f17fdde0f 100644
--- a/dlls/d3dx10_43/texture.c
+++ b/dlls/d3dx10_43/texture.c
@@ -646,15 +646,6 @@ HRESULT load_texture_data(const void *data, SIZE_T size, D3DX10_IMAGE_LOAD_INFO
     if (!data || !size)
         return E_FAIL;
 
-    if (load_info->Usage != D3DX10_DEFAULT)
-        FIXME("load_info->Usage is ignored.\n");
-    if (load_info->BindFlags != D3DX10_DEFAULT)
-        FIXME("load_info->BindFlags is ignored.\n");
-    if (load_info->CpuAccessFlags != D3DX10_DEFAULT)
-        FIXME("load_info->CpuAccessFlags is ignored.\n");
-    if (load_info->MiscFlags != D3DX10_DEFAULT)
-        FIXME("load_info->MiscFlags is ignored.\n");
-
     *resource_data = NULL;
     if (!load_info->Filter || load_info->Filter == D3DX10_DEFAULT)
         load_info->Filter = D3DX10_FILTER_TRIANGLE | D3DX10_FILTER_DITHER;
@@ -795,10 +786,11 @@ HRESULT load_texture_data(const void *data, SIZE_T size, D3DX10_IMAGE_LOAD_INFO
     *resource_data = (D3D10_SUBRESOURCE_DATA *)sub_rsrcs;
     sub_rsrcs = NULL;
 
-    load_info->Usage = D3D10_USAGE_DEFAULT;
-    load_info->BindFlags = D3D10_BIND_SHADER_RESOURCE;
-    load_info->CpuAccessFlags = 0;
-    load_info->MiscFlags = img_info.MiscFlags;
+    load_info->Usage = (load_info->Usage == D3DX10_DEFAULT) ? D3D10_USAGE_DEFAULT : load_info->Usage;
+    load_info->BindFlags = (load_info->BindFlags == D3DX10_DEFAULT) ? D3D10_BIND_SHADER_RESOURCE : load_info->BindFlags;
+    load_info->CpuAccessFlags = (load_info->CpuAccessFlags == D3DX10_DEFAULT) ? 0 : load_info->CpuAccessFlags;
+    load_info->MiscFlags = (load_info->MiscFlags == D3DX10_DEFAULT) ? 0 : load_info->MiscFlags;
+    load_info->MiscFlags |= img_info.MiscFlags;
     if (load_info->pSrcInfo)
         *load_info->pSrcInfo = img_info;
 
-- 
2.51.0


From 60ece0635b1d6f5176190a4c2fa68fc9b7a8d9cd Mon Sep 17 00:00:00 2001
From: Connor McAdams <cmcadams@codeweavers.com>
Date: Wed, 17 Sep 2025 15:05:17 -0400
Subject: [PATCH] d3dx10: Set D3DX10_IMAGE_LOAD_INFO pSrcInfo value if passed
 in.

Signed-off-by: Connor McAdams <cmcadams@codeweavers.com>
---
 dlls/d3dx10_43/tests/d3dx10.c | 116 ++++++++++++++++++++++++++++++++++
 dlls/d3dx10_43/texture.c      |   4 +-
 2 files changed, 118 insertions(+), 2 deletions(-)

diff --git a/dlls/d3dx10_43/tests/d3dx10.c b/dlls/d3dx10_43/tests/d3dx10.c
index 6155855713e..f660b9a2953 100644
--- a/dlls/d3dx10_43/tests/d3dx10.c
+++ b/dlls/d3dx10_43/tests/d3dx10.c
@@ -2964,6 +2964,12 @@ static void test_D3DX10CreateAsyncTextureInfoProcessor(void)
     CoUninitialize();
 }
 
+static const D3DX10_IMAGE_LOAD_INFO d3dx10_default_load_info =
+{
+    D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT,
+    D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, D3DX10_DEFAULT, NULL
+};
+
 static void test_D3DX10CreateAsyncTextureProcessor(void)
 {
     ID3DX10DataProcessor *dp;
@@ -2998,6 +3004,9 @@ static void test_D3DX10CreateAsyncTextureProcessor(void)
 
     for (i = 0; i < ARRAY_SIZE(test_image); ++i)
     {
+        D3DX10_IMAGE_LOAD_INFO load_info = d3dx10_default_load_info;
+        D3DX10_IMAGE_INFO info = { 0 };
+
         winetest_push_context("Test %u", i);
 
         hr = D3DX10CreateAsyncTextureProcessor(device, NULL, &dp);
@@ -3018,6 +3027,27 @@ static void test_D3DX10CreateAsyncTextureProcessor(void)
         hr = ID3DX10DataProcessor_Destroy(dp);
         ok(hr == S_OK, "Got unexpected hr %#lx.\n", hr);
 
+        /* Check that D3DX10_IMAGE_INFO argument is set. */
+        load_info.pSrcInfo = &info;
+        hr = D3DX10CreateAsyncTextureProcessor(device, &load_info, &dp);
+        ok(hr == S_OK, "Got unexpected hr %#lx.\n", hr);
+
+        hr = ID3DX10DataProcessor_Process(dp, (void *)test_image[i].data, test_image[i].size);
+        ok(hr == S_OK || broken(hr == E_FAIL && test_image[i].expected_info.ImageFileFormat == D3DX10_IFF_WMP),
+                "Got unexpected hr %#lx.\n", hr);
+        if (hr == S_OK)
+        {
+            hr = ID3DX10DataProcessor_CreateDeviceObject(dp, (void **)&resource);
+            ok(hr == S_OK, "Got unexpected hr %#lx.\n", hr);
+            check_resource_info(resource, test_image + i, __LINE__);
+            check_resource_data(resource, test_image + i, __LINE__);
+            check_image_info(&info, test_image + i, __LINE__);
+            ID3D10Resource_Release(resource);
+        }
+
+        hr = ID3DX10DataProcessor_Destroy(dp);
+        ok(hr == S_OK, "Got unexpected hr %#lx.\n", hr);
+
         winetest_pop_context();
     }
 
@@ -4117,6 +4147,8 @@ static void test_create_texture(void)
 
     for (i = 0; i < ARRAY_SIZE(test_image); ++i)
     {
+        D3DX10_IMAGE_INFO info = { 0 };
+
         winetest_push_context("Test %u", i);
 
         hr2 = 0xdeadbeef;
@@ -4131,6 +4163,22 @@ static void test_create_texture(void)
             ID3D10Resource_Release(resource);
         }
 
+        /* Check that D3DX10_IMAGE_INFO argument is set. */
+        load_info = d3dx10_default_load_info;
+        load_info.pSrcInfo = &info;
+        hr2 = 0xdeadbeef;
+        hr = D3DX10CreateTextureFromMemory(device, test_image[i].data, test_image[i].size, &load_info, NULL, &resource, &hr2);
+        ok(hr == hr2, "Got unexpected hr2 %#lx.\n", hr2);
+        ok(hr == S_OK || broken(hr == E_FAIL && test_image[i].expected_info.ImageFileFormat == D3DX10_IFF_WMP),
+                "Got unexpected hr %#lx.\n", hr);
+        if (hr == S_OK)
+        {
+            check_resource_info(resource, test_image + i, __LINE__);
+            check_resource_data(resource, test_image + i, __LINE__);
+            check_image_info(&info, test_image + i, __LINE__);
+            ID3D10Resource_Release(resource);
+        }
+
         winetest_pop_context();
     }
 
@@ -4274,6 +4322,8 @@ static void test_create_texture(void)
 
     for (i = 0; i < ARRAY_SIZE(test_image); ++i)
     {
+        D3DX10_IMAGE_INFO info = { 0 };
+
         winetest_push_context("Test %u", i);
         create_file(test_filename, test_image[i].data, test_image[i].size, path);
 
@@ -4301,6 +4351,37 @@ static void test_create_texture(void)
             ID3D10Resource_Release(resource);
         }
 
+        /* Check that D3DX10_IMAGE_INFO argument is set. */
+        load_info = d3dx10_default_load_info;
+        load_info.pSrcInfo = &info;
+        hr2 = 0xdeadbeef;
+        hr = D3DX10CreateTextureFromFileW(device, path, &load_info, NULL, &resource, &hr2);
+        ok(hr == hr2, "Got unexpected hr2 %#lx.\n", hr2);
+        ok(hr == S_OK || broken(hr == E_FAIL && test_image[i].expected_info.ImageFileFormat == D3DX10_IFF_WMP),
+                "Got unexpected hr %#lx.\n", hr);
+        if (hr == S_OK)
+        {
+            check_resource_info(resource, test_image + i, __LINE__);
+            check_resource_data(resource, test_image + i, __LINE__);
+            check_image_info(&info, test_image + i, __LINE__);
+            ID3D10Resource_Release(resource);
+        }
+
+        load_info = d3dx10_default_load_info;
+        load_info.pSrcInfo = &info;
+        hr2 = 0xdeadbeef;
+        hr = D3DX10CreateTextureFromFileA(device, get_str_a(path), &load_info, NULL, &resource, &hr2);
+        ok(hr == hr2, "Got unexpected hr2 %#lx.\n", hr2);
+        ok(hr == S_OK || broken(hr == E_FAIL && test_image[i].expected_info.ImageFileFormat == D3DX10_IFF_WMP),
+                "Got unexpected hr %#lx.\n", hr);
+        if (hr == S_OK)
+        {
+            check_resource_info(resource, test_image + i, __LINE__);
+            check_resource_data(resource, test_image + i, __LINE__);
+            check_image_info(&info, test_image + i, __LINE__);
+            ID3D10Resource_Release(resource);
+        }
+
         delete_file(test_filename);
         winetest_pop_context();
     }
@@ -4351,6 +4432,8 @@ static void test_create_texture(void)
 
     for (i = 0; i < ARRAY_SIZE(test_image); ++i)
     {
+        D3DX10_IMAGE_INFO info = { 0 };
+
         winetest_push_context("Test %u", i);
         resource_module = create_resource_module(test_resource_name, test_image[i].data, test_image[i].size);
 
@@ -4385,6 +4468,39 @@ static void test_create_texture(void)
             ID3D10Resource_Release(resource);
         }
 
+        /* Check that D3DX10_IMAGE_INFO argument is set. */
+        load_info = d3dx10_default_load_info;
+        load_info.pSrcInfo = &info;
+        hr2 = 0xdeadbeef;
+        hr = D3DX10CreateTextureFromResourceW(device, resource_module,
+                test_resource_name, &load_info, NULL, &resource, &hr2);
+        ok(hr == S_OK || broken(hr == E_FAIL && test_image[i].expected_info.ImageFileFormat == D3DX10_IFF_WMP),
+                "Got unexpected hr %#lx.\n", hr);
+        ok(hr == hr2, "Got unexpected hr2 %#lx.\n", hr2);
+        if (hr == S_OK)
+        {
+            check_resource_info(resource, test_image + i, __LINE__);
+            check_resource_data(resource, test_image + i, __LINE__);
+            check_image_info(&info, test_image + i, __LINE__);
+            ID3D10Resource_Release(resource);
+        }
+
+        load_info = d3dx10_default_load_info;
+        load_info.pSrcInfo = &info;
+        hr2 = 0xdeadbeef;
+        hr = D3DX10CreateTextureFromResourceA(device, resource_module,
+                get_str_a(test_resource_name), &load_info, NULL, &resource, &hr2);
+        ok(hr == S_OK || broken(hr == E_FAIL && test_image[i].expected_info.ImageFileFormat == D3DX10_IFF_WMP),
+                "Got unexpected hr %#lx.\n", hr);
+        ok(hr == hr2, "Got unexpected hr2 %#lx.\n", hr2);
+        if (hr == S_OK)
+        {
+            check_resource_info(resource, test_image + i, __LINE__);
+            check_resource_data(resource, test_image + i, __LINE__);
+            check_image_info(&info, test_image + i, __LINE__);
+            ID3D10Resource_Release(resource);
+        }
+
         delete_resource_module(test_resource_name, resource_module);
         winetest_pop_context();
     }
diff --git a/dlls/d3dx10_43/texture.c b/dlls/d3dx10_43/texture.c
index 2c09040838b..4d279bccbd5 100644
--- a/dlls/d3dx10_43/texture.c
+++ b/dlls/d3dx10_43/texture.c
@@ -666,8 +666,6 @@ HRESULT load_texture_data(const void *data, SIZE_T size, D3DX10_IMAGE_LOAD_INFO
         FIXME("load_info->Filter is ignored.\n");
     if (load_info->MipFilter != D3DX10_DEFAULT)
         FIXME("load_info->MipFilter is ignored.\n");
-    if (load_info->pSrcInfo)
-        FIXME("load_info->pSrcInfo is ignored.\n");
 
     *resource_data = NULL;
     hr = d3dx_image_init(data, size, &image, 0, D3DX_IMAGE_SUPPORT_DXT10);
@@ -764,6 +762,8 @@ HRESULT load_texture_data(const void *data, SIZE_T size, D3DX10_IMAGE_LOAD_INFO
     load_info->BindFlags = D3D10_BIND_SHADER_RESOURCE;
     load_info->CpuAccessFlags = 0;
     load_info->MiscFlags = img_info.MiscFlags;
+    if (load_info->pSrcInfo)
+        *load_info->pSrcInfo = img_info;
 
 end:
     d3dx_image_cleanup(&image);
-- 
2.51.0


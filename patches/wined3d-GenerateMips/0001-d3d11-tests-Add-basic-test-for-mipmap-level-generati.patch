From 11060b421e2879d9307be95cba69117d6adf69aa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sat, 16 Sep 2017 05:13:04 +0200
Subject: d3d11/tests: Add basic test for mipmap level generation.

---
 dlls/d3d11/tests/d3d11.c | 111 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 111 insertions(+)

diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index 3c8ff15d6eb..0dc1c94d883 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -25903,6 +25903,116 @@ static void test_dual_blending(void)
     release_test_context(&test_context);
 }
 
+static void test_mipmap_generation(void)
+{
+    D3D11_SHADER_RESOURCE_VIEW_DESC srv_desc;
+    struct d3d11_test_context test_context;
+    D3D11_TEXTURE2D_DESC texture_desc;
+    ID3D11ShaderResourceView *srv;
+    ID3D11DeviceContext *context;
+    ID3D11Texture2D *texture;
+    ID3D11Device *device;
+    DWORD color[64*64];
+    HRESULT hr;
+    int i;
+
+    if (!init_test_context(&test_context, NULL))
+        return;
+
+    device = test_context.device;
+    context = test_context.immediate_context;
+
+    texture_desc.Width = 64;
+    texture_desc.Height = 64;
+    texture_desc.MipLevels = 3;
+    texture_desc.ArraySize = 2;
+    texture_desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
+    texture_desc.SampleDesc.Count = 1;
+    texture_desc.SampleDesc.Quality = 0;
+    texture_desc.Usage = D3D11_USAGE_DEFAULT;
+    texture_desc.BindFlags = D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_RENDER_TARGET;
+    texture_desc.CPUAccessFlags = 0;
+    texture_desc.MiscFlags = D3D11_RESOURCE_MISC_GENERATE_MIPS;
+
+    hr = ID3D11Device_CreateTexture2D(device, &texture_desc, NULL, &texture);
+    ok(SUCCEEDED(hr), "Failed to create texture, hr %#x.\n", hr);
+
+    hr = ID3D11Device_CreateShaderResourceView(device, (ID3D11Resource *)texture, NULL, &srv);
+    ok(SUCCEEDED(hr), "Failed to create shader resource view, hr %#x.\n", hr);
+
+    for (i = 0; i < texture_desc.Width * texture_desc.Height; i++)
+        color[i] = 0xff00ff00;
+    ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource*)texture, 0, NULL, color, 64 * 4, 64 * 64 * 4);
+
+    for (i = 0; i < texture_desc.Width * texture_desc.Height; i++)
+        color[i] = 0x00ffff00;
+    ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource*)texture, 3, NULL, color, 64 * 4, 64 * 64 * 4);
+
+    check_texture_sub_resource_color(texture, 0, NULL, 0xff00ff00, 0);
+    check_texture_sub_resource_color(texture, 1, NULL, 0x00000000, 0);
+    check_texture_sub_resource_color(texture, 2, NULL, 0x00000000, 0);
+    check_texture_sub_resource_color(texture, 3, NULL, 0x00ffff00, 0);
+    check_texture_sub_resource_color(texture, 4, NULL, 0x00000000, 0);
+    check_texture_sub_resource_color(texture, 5, NULL, 0x00000000, 0);
+
+    ID3D11DeviceContext_GenerateMips(context, srv);
+
+    check_texture_sub_resource_color(texture, 0, NULL, 0xff00ff00, 0);
+    todo_wine check_texture_sub_resource_color(texture, 1, NULL, 0xff00ff00, 0);
+    todo_wine check_texture_sub_resource_color(texture, 2, NULL, 0xff00ff00, 0);
+    check_texture_sub_resource_color(texture, 3, NULL, 0x00ffff00, 0);
+    todo_wine check_texture_sub_resource_color(texture, 4, NULL, 0x00ffff00, 0);
+    todo_wine check_texture_sub_resource_color(texture, 5, NULL, 0x00ffff00, 0);
+
+    ID3D11ShaderResourceView_Release(srv);
+    ID3D11Texture2D_Release(texture);
+
+    hr = ID3D11Device_CreateTexture2D(device, &texture_desc, NULL, &texture);
+    ok(SUCCEEDED(hr), "Failed to create texture, hr %#x.\n", hr);
+
+    srv_desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
+    srv_desc.ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2DARRAY;
+    srv_desc.Texture2DArray.MostDetailedMip = 1;
+    srv_desc.Texture2DArray.MipLevels = -1;
+    srv_desc.Texture2DArray.FirstArraySlice = 0;
+    srv_desc.Texture2DArray.ArraySize = 1;
+
+    hr = ID3D11Device_CreateShaderResourceView(device, (ID3D11Resource *)texture, &srv_desc, &srv);
+    ok(SUCCEEDED(hr), "Failed to create shader resource view, hr %#x.\n", hr);
+
+    for (i = 0; i < texture_desc.Width * texture_desc.Height; i++)
+        color[i] = 0xff00ff00;
+    ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource*)texture, 0, NULL, color, 64 * 4, 64 * 64 * 4);
+    ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource*)texture, 3, NULL, color, 64 * 4, 64 * 64 * 4);
+
+    for (i = 0; i < texture_desc.Width * texture_desc.Height; i++)
+        color[i] = 0xffff0000;
+    ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource*)texture, 1, NULL, color, 32 * 4, 32 * 32 * 4);
+    ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource*)texture, 4, NULL, color, 32 * 4, 32 * 32 * 4);
+
+    check_texture_sub_resource_color(texture, 0, NULL, 0xff00ff00, 0);
+    check_texture_sub_resource_color(texture, 1, NULL, 0xffff0000, 0);
+    check_texture_sub_resource_color(texture, 2, NULL, 0x00000000, 0);
+    check_texture_sub_resource_color(texture, 3, NULL, 0xff00ff00, 0);
+    check_texture_sub_resource_color(texture, 4, NULL, 0xffff0000, 0);
+    check_texture_sub_resource_color(texture, 5, NULL, 0x00000000, 0);
+
+    ID3D11DeviceContext_GenerateMips(context, srv);
+
+    check_texture_sub_resource_color(texture, 0, NULL, 0xff00ff00, 0);
+    check_texture_sub_resource_color(texture, 1, NULL, 0xffff0000, 0);
+    if (!is_warp_device(device)) /* broken on WARP device */
+        todo_wine check_texture_sub_resource_color(texture, 2, NULL, 0xffff0000, 0);
+    check_texture_sub_resource_color(texture, 3, NULL, 0xff00ff00, 0);
+    check_texture_sub_resource_color(texture, 4, NULL, 0xffff0000, 0);
+    check_texture_sub_resource_color(texture, 5, NULL, 0x00000000, 0);
+
+    ID3D11ShaderResourceView_Release(srv);
+    ID3D11Texture2D_Release(texture);
+
+    release_test_context(&test_context);
+}
+
 START_TEST(d3d11)
 {
     unsigned int argc, i;
@@ -26031,6 +26141,7 @@ START_TEST(d3d11)
     test_early_depth_stencil();
     test_conservative_depth_output();
     test_dual_blending();
+    test_mipmap_generation();
     test_format_compatibility();
     test_clip_distance();
     test_combined_clip_and_cull_distances();
-- 
2.14.2
